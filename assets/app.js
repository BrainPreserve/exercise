/* BrainPreserve — Exercise Coach (CSV-strict, auto-AI) */
const state = { csvRows: [], csvHeaders: [], metrics: JSON.parse(localStorage.getItem('bp_metrics')||'[]'), admin:false, libraryView:[] };
const $ = s=>document.querySelector(s);
function escapeHtml(s){return (s||'').replace(/[&<>'"]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;',\"'\":'&#39;','\"':'&quot;'}[c]));}
function saveMetrics(a){localStorage.setItem('bp_metrics',JSON.stringify(a||[]));}
function neutralLatest(){return {dateISO:new Date().toISOString(),hrvDeltaPct:0,sleepEff:85,sbp:120,dbp:75,tir:70,crp:1.0,focus:'both',notes:''};}
function loadCSV(url){return new Promise((resolve,reject)=>{Papa.parse(url,{download:true,header:true,dynamicTyping:false,skipEmptyLines:true,complete:res=>resolve(res),error:err=>reject(err)});});}
const GATE={HRV_DROP_WARN:-8,SLEEP_LOW:80,SBP_HIGH:160,DBP_HIGH:100,TIR_LOW:60,CRP_HIGH:3.0};
function classifyGates({hrvDelta,sleepEff,sbp,dbp,tir,crp}){const alerts=[]; if(hrvDelta<=GATE.HRV_DROP_WARN)alerts.push('HRV Δ low'); if(sleepEff<GATE.SLEEP_LOW)alerts.push('Sleep suboptimal'); if(sbp>=GATE.SBP_HIGH||dbp>=GATE.DBP_HIGH)alerts.push('BP high'); if(tir<GATE.TIR_LOW)alerts.push('Glucose variability'); if(crp>=GATE.CRP_HIGH)alerts.push('Inflammation high'); return {hiAllowed:alerts.length===0,alerts};}
function normalizeRow(row){return{title:(row['Exercise Type']||'').trim(),key:(row['exercise_key']||'').trim(),modality:(row['modality']||'').trim(),protocol_start:(row['protocol_start']||'').trim(),progression_rule:(row['progression_rule']||'').trim(),contraindications:(row['contraindications_flags']||'').trim(),biomarker_hooks:(row['biomarker_hooks']||'').trim(),cognitive_targets:(row['cognitive_targets']||'').trim(),mechanism_tags:(row['mechanism_tags']||'').trim(),safety_notes:(row['safety_notes']||'').trim(),equipment:(row['home_equipment']||'').split(',').map(s=>s.trim()).filter(Boolean),coach_non_api:(row['coach_script_non_api']||'').trim(),coach_api_prompt:(row['coach_prompt_api']||'').trim(),goal_label:(row['goal_label']||'').trim(),goal_signals:{muscle_mass:(row['muscle_mass']||'').trim(),cv_fitness:(row['cv_fitness']||'').trim(),glycemic_control:(row['glycemic_control']||'').trim(),blood_pressure:(row['blood_pressure']||'').trim(),body_composition:(row['body_composition']||'').trim(),lipids:(row['lipids']||'').trim()},raw:row};}
function wireTabs(){document.querySelectorAll('.tab').forEach(b=>{b.addEventListener('click',()=>{document.querySelectorAll('.tab').forEach(x=>x.classList.remove('active')); b.classList.add('active'); const t=b.dataset.tab; document.querySelectorAll('.view').forEach(v=>v.classList.remove('active')); $('#'+t).classList.add('active'); if(t==='progress')updateProgress();});}); $('#disableAdmin')?.addEventListener('click',e=>{e.preventDefault();const u=new URL(location.href);u.searchParams.set('admin','0');location.href=u.toString();});}
function setAdminVisibility(a){document.querySelectorAll('.admin-only').forEach(el=>{el.hidden=!a;}); $('#data')?.toggleAttribute('hidden',!a);}
function wirePlan(){$('#saveMetrics').addEventListener('click',()=>{const m=readForm(); if(!m)return; state.metrics.push(m); saveMetrics(state.metrics); updateProgress(); alert('Saved.');}); $('#genPlan').addEventListener('click',()=>{const latest=state.metrics[state.metrics.length-1]||readForm()||neutralLatest(); const g=classifyGates({hrvDelta:latest.hrvDeltaPct,sleepEff:latest.sleepEff,sbp:latest.sbp,dbp:latest.dbp,tir:latest.tir,crp:latest.crp}); renderPlan(latest,g);}); $('#clearForm').addEventListener('click',()=>$('#metrics-form').reset());}
function readForm(){const hb=+$('#hrvBaseline').value, ht=+$('#hrvToday').value, se=+$('#sleepEff').value, sbp=+$('#sbp').value, dbp=+$('#dbp').value, tir=+$('#tir').value, crp=+$('#crp').value; if(![hb,ht,se,sbp,dbp,tir,crp].every(n=>Number.isFinite(n)))return null; const delta=hb>0?Math.round(((ht-hb)/hb)*100):0; const fEl=document.querySelector('input[name=\"planFocus\"]:checked'); const focus=fEl?fEl.value:'both'; return{dateISO:new Date().toISOString(),hrvDeltaPct:delta,sleepEff:se,sbp,dbp,tir,crp,focus,notes:($('#notes').value||'').trim()};}
function renderPlan(latest,g){const hi=g.hiAllowed; $('#plan-summary').textContent=`Based on your latest metrics:\nHRV Δ ${latest.hrvDeltaPct}% ; Sleep ${latest.sleepEff}% ; SBP/DBP ${latest.sbp}/${latest.dbp} ; TIR ${latest.tir}% ; hs‑CRP ${latest.crp} mg/L.`; const bw=$('#plan-gates'); bw.innerHTML=''; (g.alerts||[]).forEach(a=>{const b=document.createElement('span'); b.className='badge bad'; b.textContent=a; bw.appendChild(b);}); if(g.alerts.length===0){const ok=document.createElement('span'); ok.className='badge ok'; ok.textContent='High‑intensity allowed'; bw.appendChild(ok);} else {const w=document.createElement('span'); w.className='badge warn'; w.textContent='Favor moderate/technique work'; bw.appendChild(w);} const preferred=state.csvRows.filter(r=>{if(latest.focus==='muscle')return (r.goal_signals.muscle_mass||'').length>0; if(latest.focus==='aerobic')return (r.goal_signals.cv_fitness||'').length>0; return true;}).slice(0,5); const target=$('#plan-recos'); target.innerHTML=''; preferred.forEach(r=>{const wrap=document.createElement('div'); wrap.className='rec-card'; wrap.innerHTML=`<div class=\"title\">${r.title}</div><div class=\"meta small\">${r.modality?`Type: ${r.modality} · `:''}${r.goal_label?`Targets: ${r.goal_label}`:''}</div>${r.protocol_start?`<div class=\"small\"><strong>Start:</strong> ${r.protocol_start}</div>`:''}${r.progression_rule?`<div class=\"small\"><strong>Progression:</strong> ${r.progression_rule}</div>`:''}${r.safety_notes?`<div class=\"small\"><strong>Safety:</strong> ${escapeHtml(r.safety_notes)}</div>`:''}${r.coach_non_api?`<div class=\"coach\"><h4>Coach (deterministic)</h4>${escapeHtml(r.coach_non_api)}</div>`:''}<div class=\"coach\" id=\"ai_${r.key}\"><h4>AI coaching</h4><div class=\"ai-body\">Loading…</div></div>`; target.appendChild(wrap); autoLoadAiAddendum(r.key,r.coach_api_prompt);});}
function wireLibrary(){$('#applyFinder').addEventListener('click',applyFinder); $('#clearFinder').addEventListener('click',()=>{document.querySelectorAll('#libTypeFilters input[type=\"checkbox\"]').forEach(cb=>cb.checked=false); document.querySelectorAll('input[name=\"libFocus\"]').forEach(r=>{r.checked=r.value==='both';}); renderLibrary(state.csvRows);});}
function buildTypeFilters(){const set=new Set(state.csvRows.map(r=>r.modality).filter(Boolean)); const c=$('#libTypeFilters'); c.innerHTML=''; Array.from(set).sort().forEach(mod=>{const id=`mod_${mod}`; const label=document.createElement('label'); label.innerHTML=`<input type=\"checkbox\" id=\"${id}\" value=\"${mod}\"> ${mod}`; c.appendChild(label);});}
function buildEquipmentFilters(){const all=new Set(); state.csvRows.forEach(r=>r.equipment.forEach(e=>all.add(e))); const c=$('#equipFilters'); c.innerHTML=''; Array.from(all).sort().forEach(eq=>{const id=`eq_${eq.replace(/\\W+/g,'_')}`; const label=document.createElement('label'); label.innerHTML=`<input type=\"checkbox\" id=\"${id}\" value=\"${eq}\"> ${eq}`; c.appendChild(label);});}
function applyFinder(){const types=Array.from(document.querySelectorAll('#libTypeFilters input:checked')).map(cb=>cb.value); const equip=Array.from(document.querySelectorAll('#equipFilters input:checked')).map(cb=>cb.value); const fEl=document.querySelector('input[name=\"libFocus\"]:checked'); const focus=fEl?fEl.value:'both'; let rows=state.csvRows.slice(); if(types.length)rows=rows.filter(r=>types.includes(r.modality)); if(equip.length)rows=rows.filter(r=>equip.every(eq=>r.equipment.includes(eq))); if(focus==='muscle')rows=rows.filter(r=>(r.goal_signals.muscle_mass||'').length>0); if(focus==='aerobic')rows=rows.filter(r=>(r.goal_signals.cv_fitness||'').length>0); renderLibrary(rows);}
function renderLibrary(rows){state.libraryView=rows; const t=$('#library-list'); t.innerHTML=''; rows.forEach(r=>{const equipment=r.equipment.join(', '); const wrap=document.createElement('div'); wrap.className='rec-card'; wrap.innerHTML=`<div class=\"title\">${r.title}</div><div class=\"meta small\">${r.modality?`Type: ${r.modality} · `:''}${r.goal_label?`Targets: ${r.goal_label} · `:''}${equipment?`Equipment: ${equipment}`:''}</div>${r.protocol_start?`<div class=\"small\"><strong>Start:</strong> ${r.protocol_start}</div>`:''}${r.progression_rule?`<div class=\"small\"><strong>Progression:</strong> ${r.progression_rule}</div>`:''}${r.safety_notes?`<div class=\"small\"><strong>Safety:</strong> ${escapeHtml(r.safety_notes)}</div>`:''}${r.coach_non_api?`<div class=\"coach\"><h4>Coach (deterministic)</h4>${escapeHtml(r.coach_non_api)}</div>`:''}<div class=\"coach\" id=\"ai_${r.key}\"><h4>AI coaching</h4><div class=\"ai-body\">Loading…</div></div>`; t.appendChild(wrap); autoLoadAiAddendum(r.key,r.coach_api_prompt);});}
async function autoLoadAiAddendum(key,prompt){const el=document.getElementById('ai_'+key); if(!el)return; try{const latest=state.metrics[state.metrics.length-1]||neutralLatest(); const g=classifyGates({hrvDelta:latest.hrvDeltaPct,sleepEff:latest.sleepEff,sbp:latest.sbp,dbp:latest.dbp,tir:latest.tir,crp:latest.crp}); const res=await fetch('/.netlify/functions/coach',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({question:prompt||'Provide concise coaching insights for this exercise.',latest,gates:g})}); if(res.ok){const j=await res.json(); el.querySelector('.ai-body').textContent=(j&&j.addendum)?j.addendum:'AI addendum unavailable.';} else {el.querySelector('.ai-body').textContent='AI addendum unavailable.';} }catch(_){el.querySelector('.ai-body').textContent='AI addendum unavailable.';}}
function wireProgress(){$('#exportMetrics').addEventListener('click',exportMetrics); $('#clearMetrics').addEventListener('click',()=>{if(confirm('Clear all saved metrics?')){state.metrics=[]; saveMetrics(state.metrics); updateProgress();}});}
function updateProgress(){const w=$('#saved-table'); w.innerHTML=''; const tbl=document.createElement('table'); tbl.innerHTML=`<thead><tr><th>Date</th><th>HRV Δ%</th><th>Sleep %</th><th>TIR %</th><th>SBP/DBP</th><th>hs‑CRP</th><th>Focus</th><th>Notes</th></tr></thead><tbody></tbody>`; (state.metrics||[]).forEach(r=>{const tr=document.createElement('tr'); const d=new Date(r.dateISO); tr.innerHTML=`<td>${d.toLocaleDateString()}</td><td>${r.hrvDeltaPct}</td><td>${r.sleepEff}</td><td>${r.tir}</td><td>${r.sbp}/${r.dbp}</td><td>${r.crp}</td><td>${r.focus}</td><td>${escapeHtml(r.notes)}</td>`; tbl.querySelector('tbody').appendChild(tr);}); w.appendChild(tbl); const ctx=document.getElementById('trendChart'); if(ctx&&window.Chart){const labels=state.metrics.map(r=>new Date(r.dateISO).toLocaleDateString()); const hrv=state.metrics.map(r=>r.hrvDeltaPct); const slp=state.metrics.map(r=>r.sleepEff); const tir=state.metrics.map(r=>r.tir); if(state._chart)state._chart.destroy(); state._chart=new Chart(ctx,{type:'line',data:{labels,datasets:[{label:'HRV Δ% (vs baseline)',data:hrv},{label:'Sleep %',data:slp},{label:'TIR %',data:tir}]},options:{responsive:true,maintainAspectRatio:false,interaction:{mode:'index',intersect:false}}}); } const latest=state.metrics[state.metrics.length-1]; $('#latest-bp').textContent=latest?`${latest.sbp}/${latest.dbp}`:'—'; $('#latest-crp').textContent=latest?`${latest.crp}`:'—';}
function exportMetrics(){const rows=state.metrics||[]; const headers=['dateISO','hrvDeltaPct','sleepEff','tir','sbp','dbp','crp','focus','notes']; const csv=[headers.join(',')].concat(rows.map(r=>headers.map(h=>String(r[h]??'').replace(/,/g,';')).join(','))).join('\n'); const blob=new Blob([csv],{type:'text/csv'}); const a=document.createElement('a'); a.href=URL.createObjectURL(blob); a.download='metrics.csv'; a.click();}
function wireAsk(){$('#askBtn').addEventListener('click',onAsk);}
async function onAsk(){const q=$('#askInput').value.trim(); if(!q)return; const latest=state.metrics[state.metrics.length-1]||neutralLatest(); const g=classifyGates({hrvDelta:latest.hrvDeltaPct,sleepEff:latest.sleepEff,sbp:latest.sbp,dbp:latest.dbp,tir:latest.tir,crp:latest.crp}); let answer=buildDeterministicAnswer(q,latest,g); try{const res=await fetch('/.netlify/functions/coach',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({question:q,latest,gates:g})}); if(res.ok){const j=await res.json(); if(j&&j.addendum)answer+=`\n\n———\nAI coaching:\n${j.addendum}`; else answer+=`\n\n———\nAI coaching: unavailable.`;} else {answer+=`\n\n———\nAI coaching: unavailable.`;} }catch(_){answer+=`\n\n———\nAI coaching: unavailable.`;} $('#askAnswer').textContent=answer;}
function buildDeterministicAnswer(q,latest,g){const hi=g.hiAllowed; const lines=[]; lines.push(`Metrics: HRV Δ ${latest.hrvDeltaPct}% ; Sleep ${latest.sleepEff}% ; SBP/DBP ${latest.sbp}/${latest.dbp} ; TIR ${latest.tir}% ; hs‑CRP ${latest.crp} mg/L.`); lines.push(hi?'High‑intensity is allowed today if technique is safe.':'Favor moderate, technique‑focused work today; avoid max efforts.'); return lines.join('\n');}
function refreshCsvPreview(rows,headers){const w=$('#csvPreview'); if(!w)return; w.innerHTML=''; const tbl=document.createElement('table'); const thead=document.createElement('thead'); const hr=document.createElement('tr'); (headers||[]).forEach(h=>{const th=document.createElement('th'); th.textContent=h; hr.appendChild(th);}); thead.appendChild(hr); tbl.appendChild(thead); const tb=document.createElement('tbody'); rows.slice(0,25).forEach(r=>{const tr=document.createElement('tr'); (headers||[]).forEach(h=>{const td=document.createElement('td'); td.textContent=r.raw[h]||''; tr.appendChild(td);}); tb.appendChild(tr);}); tbl.appendChild(tb); w.appendChild(tbl);}
async function init(){const url=new URL(location.href); state.admin=url.searchParams.get('admin')==='1'; setAdminVisibility(state.admin); try{const parsed=await loadCSV('/data/master.csv'); state.csvHeaders=parsed.meta.fields||[]; state.csvRows=parsed.data.map(r=>normalizeRow(r)); buildTypeFilters(); buildEquipmentFilters(); renderLibrary(state.csvRows); if(state.admin)refreshCsvPreview(state.csvRows, state.csvHeaders);}catch(e){console.error('CSV load error:',e); alert('Could not load /data/master.csv. Ensure the file exists and is same-origin.');} wireTabs(); wirePlan(); wireLibrary(); wireProgress(); wireAsk(); updateProgress();}
document.addEventListener('DOMContentLoaded',init);
